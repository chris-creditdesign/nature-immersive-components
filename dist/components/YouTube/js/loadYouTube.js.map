{"version":3,"sources":["../../../../src/components/YouTube/js/loadYouTube.js"],"names":["loadYouTube","players","observer","window","ResizeObserver","checkWidth","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","videosAsObjects","Array","from","getElementsByClassName","video","dataset","videoId","ratio","autoPlay","id","container","onYouTubeIframeAPIReady","youtubePlayers","map","elem","width","parseInt","offsetWidth","player","forEach","push","thisVideo","observe"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;AAeA,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB;AACA,MAAMC,OAAO,GAAG,EAAhB,CAFyB,CAGzB;;AACA,MAAMC,QAAQ,GACb,oBAAoBC,MAApB,GACG,IAAIC,cAAJ,CAAmBC,mBAAnB,CADH,GAEG,IAHJ,CAJyB,CAQzB;;AACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ;AACAF,EAAAA,GAAG,CAACG,GAAJ,GAAU,oCAAV;AACA,MAAMC,cAAc,GAAGH,QAAQ,CAACI,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAvB;AACAD,EAAAA,cAAc,CAACE,UAAf,CAA0BC,YAA1B,CAAuCP,GAAvC,EAA4CI,cAA5C,EAZyB,CAczB;;AACA,MAAMI,eAAe,GAAGC,KAAK,CAACC,IAAN,CACvBT,QAAQ,CAACU,sBAAT,CAAgC,iBAAhC,CADuB,EAEvB,UAAAC,KAAK,EAAI;AAAA,yBACiCA,KAAK,CAACC,OADvC;AAAA,QACAC,OADA,kBACAA,OADA;AAAA,QACSC,KADT,kBACSA,KADT;AAAA,QACgBC,QADhB,kBACgBA,QADhB;AAAA,QAC0BC,EAD1B,kBAC0BA,EAD1B;AAER,WAAO;AACNH,MAAAA,OAAO,EAAPA,OADM;AAENC,MAAAA,KAAK,EAALA,KAFM;AAGNC,MAAAA,QAAQ,EAARA,QAHM;AAINC,MAAAA,EAAE,EAAFA,EAJM;AAKNC,MAAAA,SAAS,EAAEN;AALL,KAAP;AAOA,GAXsB,CAAxB,CAfyB,CA6BzB;;AACAf,EAAAA,MAAM,CAACsB,uBAAP,GAAiC,YAAM;AACtC,QAAMC,cAAc,GAAGZ,eAAe,CAACa,GAAhB,CAAoB,UAAAC,IAAI,EAAI;AAClD,UAAMC,KAAK,GAAGC,QAAQ,CAACF,IAAI,CAACJ,SAAL,CAAeO,WAAhB,EAA6B,EAA7B,CAAtB;AACA,UAAMC,MAAM,GAAG,yBAAW;AACzBZ,QAAAA,OAAO,EAAEQ,IAAI,CAACR,OADW;AAEzBG,QAAAA,EAAE,EAAEK,IAAI,CAACL,EAFgB;AAGzBF,QAAAA,KAAK,EAAEO,IAAI,CAACP,KAHa;AAIzBQ,QAAAA,KAAK,EAALA;AAJyB,OAAX,CAAf;AAOA,aAAOG,MAAP;AACA,KAVsB,CAAvB;AAYAN,IAAAA,cAAc,CAACO,OAAf,CAAuB,UAAAD,MAAM;AAAA,aAAI/B,OAAO,CAACiC,IAAR,CAAaF,MAAb,CAAJ;AAAA,KAA7B,EAbsC,CAetC;AACA,GAhBD,CA9ByB,CAgDzB;;;AACAlB,EAAAA,eAAe,CAACmB,OAAhB,CAAwB,UAAAE,SAAS,EAAI;AACpC,QAAIjC,QAAJ,EAAcA,QAAQ,CAACkC,OAAT,CAAiBD,SAAS,CAACX,SAA3B;AACd,GAFD;AAGA,CApDD;;eAsDexB,W","sourcesContent":["import makePlayer from \"./makePlayer\"\nimport checkWidth from \"./checkWidth\"\n\n/**\n * ## loadYouTube\n *\n * 1. Create an array to keep track of all the youtube players on page\n * 2. Create the ResizeObserver and add pass in the `checkWidth` function\n * 3. Load the IFrame Player API code asynchronously.\n * 4. Get each of the videos on page and add them to the `videosAsObjects` array\n * as an object containing their dataset attributes\n * 5. This function runs only once, it is called by the youtube iframe\n * api once it is loaded. Create a youtube player for each video in the `videosAsObjects`\n * array and push them into the `players` array.\n * 6. Observe each of the video's containers. When the contanier's size changes this should\n * trigger `checkWidth` to update the size of the video's iframe.\n *\n */\nconst loadYouTube = () => {\n\t// 1.\n\tconst players = []\n\t// 2.\n\tconst observer =\n\t\t\"ResizeObserver\" in window\n\t\t\t? new ResizeObserver(checkWidth)\n\t\t\t: null\n\t// 3.\n\tconst tag = document.createElement(\"script\")\n\ttag.src = \"https://www.youtube.com/iframe_api\"\n\tconst firstScriptTag = document.getElementsByTagName(\"script\")[0]\n\tfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag)\n\n\t// 4.\n\tconst videosAsObjects = Array.from(\n\t\tdocument.getElementsByClassName(\"js-load-youtube\"),\n\t\tvideo => {\n\t\t\tconst { videoId, ratio, autoPlay, id } = video.dataset\n\t\t\treturn {\n\t\t\t\tvideoId,\n\t\t\t\tratio,\n\t\t\t\tautoPlay,\n\t\t\t\tid,\n\t\t\t\tcontainer: video,\n\t\t\t}\n\t\t}\n\t)\n\n\t// 5.\n\twindow.onYouTubeIframeAPIReady = () => {\n\t\tconst youtubePlayers = videosAsObjects.map(elem => {\n\t\t\tconst width = parseInt(elem.container.offsetWidth, 10)\n\t\t\tconst player = makePlayer({\n\t\t\t\tvideoId: elem.videoId,\n\t\t\t\tid: elem.id,\n\t\t\t\tratio: elem.ratio,\n\t\t\t\twidth,\n\t\t\t})\n\n\t\t\treturn player\n\t\t})\n\n\t\tyoutubePlayers.forEach(player => players.push(player))\n\n\t\t// players.push(...youtubePlayers)\n\t}\n\n\t// 6.\n\tvideosAsObjects.forEach(thisVideo => {\n\t\tif (observer) observer.observe(thisVideo.container)\n\t})\n}\n\nexport default loadYouTube\n"],"file":"loadYouTube.js"}