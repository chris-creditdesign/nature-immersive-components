{"version":3,"sources":["../../../../src/components/LayoutGrid/js/index.js"],"names":["observeGrid","gridNode","window","min","dataset","test","document","createElement","style","width","appendChild","minToPixels","offsetWidth","removeChild","ro","ResizeObserver","entries","entry","cr","contentRect","isWide","classList","toggle","observe","loadGrid","grids","querySelectorAll","gridsArray","Array","from","forEach","grid"],"mappings":";;AAAA;;;;;;;;;;;;;AAaA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC/B;AACA,MAAI,oBAAoBC,MAAxB,EAAgC;AAC/B;AAD+B,QAEvBC,GAFuB,GAEfF,QAAQ,CAACG,OAFM,CAEvBD,GAFuB,EAG/B;;AACA,QAAME,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAb;AACAF,IAAAA,IAAI,CAACG,KAAL,CAAWC,KAAX,GAAmBN,GAAnB;AACAF,IAAAA,QAAQ,CAACS,WAAT,CAAqBL,IAArB;AACA,QAAMM,WAAW,GAAGN,IAAI,CAACO,WAAzB;AACAX,IAAAA,QAAQ,CAACY,WAAT,CAAqBR,IAArB;AAEA,QAAMS,EAAE,GAAG,IAAIC,cAAJ,CAAmB,UAAAC,OAAO,EAAI;AAAA;AAAA;AAAA;;AAAA;AACxC,6BAAoBA,OAApB,8HAA6B;AAAA,cAAlBC,KAAkB;AAC5B;AACA,cAAMC,EAAE,GAAGD,KAAK,CAACE,WAAjB,CAF4B,CAG5B;;AACA,cAAMC,MAAM,GAAGF,EAAE,CAACT,KAAH,GAAWE,WAA1B,CAJ4B,CAK5B;;AACAV,UAAAA,QAAQ,CAACoB,SAAT,CAAmBC,MAAnB,CAA0B,UAA1B,EAAsCF,MAAtC;AACA;AARuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASxC,KATU,CAAX;AAWAN,IAAAA,EAAE,CAACS,OAAH,CAAWtB,QAAX;AACA;AACD,CAzBD;;AA2BA,IAAMuB,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,MAAMC,KAAK,GAAGnB,QAAQ,CAACoB,gBAAT,CAA0B,oBAA1B,CAAd;AACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,KAAX,CAAnB;AAEAA,EAAAA,KAAK,CAACK,OAAN,CAAc,UAAAC,IAAI;AAAA,WAAI/B,WAAW,CAAC+B,IAAD,CAAf;AAAA,GAAlB;AACA,CALD","sourcesContent":["/**\n * ## observeGrid\n *\n * 1. Feature detect ResizeObserver.\n * 2. Get the min value from data-min='[min]'.\n * 3. Create a proxy element to measure and convert\n * the `min` value (which might be em, rem, etc) to `px`.\n * 4. Get the element's current dimensions.\n * 5. `true` if the container is wider than the minimum\n * 6. Toggle the `aboveMin` class conditionally\n *\n * @param {*} gridNode Dom element with class grid\n */\nconst observeGrid = gridNode => {\n\t// 1.\n\tif (\"ResizeObserver\" in window) {\n\t\t// 2.\n\t\tconst { min } = gridNode.dataset\n\t\t// 3.\n\t\tconst test = document.createElement(\"div\")\n\t\ttest.style.width = min\n\t\tgridNode.appendChild(test)\n\t\tconst minToPixels = test.offsetWidth\n\t\tgridNode.removeChild(test)\n\n\t\tconst ro = new ResizeObserver(entries => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\t// 4.\n\t\t\t\tconst cr = entry.contentRect\n\t\t\t\t// 5.\n\t\t\t\tconst isWide = cr.width > minToPixels\n\t\t\t\t// 6.\n\t\t\t\tgridNode.classList.toggle(\"aboveMin\", isWide)\n\t\t\t}\n\t\t})\n\n\t\tro.observe(gridNode)\n\t}\n}\n\nconst loadGrid = () => {\n\tconst grids = document.querySelectorAll(\"[data-min].js-grid\")\n\tconst gridsArray = Array.from(grids)\n\n\tgrids.forEach(grid => observeGrid(grid))\n}\n"],"file":"index.js"}