{"version":3,"sources":["../../../../src/components/Image/js/lazyloadImages.js"],"names":["enhanceImages","img","classList","contains","src","includes","pic","parentElement","largeURL","replace","medURL","URL","setAttribute","source","document","createElement","insertBefore","add","intersectionCallback","entries","forEach","entry","isIntersecting","target","lazyloadImages","root","rootMargin","images","querySelectorAll","imagesArray","Array","from","HTMLImageElement","prototype","image","window","IntersectionObserver","observers","observerOptions","index","observe"],"mappings":"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","sourcesContent":["/**\n * ## enhanceImages\n *\n * Add high res-image URL, srcset and an adjacent `source` element\n * to display high-res image.\n *\n * 1. Stop is image has already been 'enhanced'.\n * 2. Stop if the src URL does not contain '-small'.\n * 3. Find the parent picture element.\n * 4. Create the normal, large and medium urls.\n * 5. Create a source element to serve screens below 600px wide.\n * 6. Insert the new source element before the existing img element, inside the picture element.\n * 7. Add the `js-loaded` class so that img cannot be 'enhanced' again.\n *\n * @param {*} img The `img` element to be enhanced\n */\nconst enhanceImages = img => {\n\t// 1.\n\tif (img.classList.contains(\"js-loaded\")) return\n\t// 2.\n\tif (!img.src.includes(\"-small\")) return\n\n\t// 3.\n\tconst pic = img.parentElement\n\n\t// 4.\n\tconst largeURL = img.src.replace(/-small/, \"-large\")\n\tconst medURL = img.src.replace(/-small/, \"-med\")\n\tconst URL = img.src.replace(/-small/, \"\")\n\n\timg.setAttribute(\"src\", largeURL)\n\timg.setAttribute(\"srcset\", `${largeURL}, ${URL} 2x`)\n\n\t// 5.\n\tconst source = document.createElement(\"source\")\n\tsource.setAttribute(\"media\", \"(max-width: 600px)\")\n\tsource.setAttribute(\"srcset\", `${medURL}, ${largeURL} 2x`)\n\n\t// 6.\n\tpic.insertBefore(source, img)\n\n\t// 7.\n\timg.classList.add(\"js-loaded\")\n}\n\n/**\n * ## intersectionCallback\n *\n * When the images enter the screen, call `enhanceImages` on each of them.\n *\n * 1. Only call `enchanceImages` if the entry is on screen AND the class\n *    `js-loaded` is not present.\n * @param {array} entries Array of dom elements\n */\nconst intersectionCallback = entries => {\n\tentries.forEach(entry => {\n\t\t// 1.\n\t\tif (entry.isIntersecting && !entry.target.classList.contains(\"js-loaded\")) {\n\t\t\tenhanceImages(entry.target)\n\t\t}\n\t})\n}\n\n/**\n * ## lazyloadImages\n *\n * Call `enhanceImages` for each `img[loading=\"lazy\"]` on the page.\n *\n * 1. The images can natively lazyload, so no need for the IntersectionObserver.\n * Call `enhanceImages` straight away.\n * 2. Use IntersectionObserver to load the images when they move into the viewport.\n * 3. The viewport is the root by default.\n * 4. Start loading the image when it is 600px above or below the viewport\n * 5. No lazy loading options are available so pop all the high res images onto the page.\n * @param {*} root\n * @param {*} rootMargin\n */\nconst lazyloadImages = (root = null, rootMargin = \"600px 0px 600px 0px\") => {\n\tconst images = document.querySelectorAll('img[loading=\"lazy\"]')\n\tconst imagesArray = Array.from(images)\n\n\tif (\"loading\" in HTMLImageElement.prototype) {\n\t\t// 1.\n\t\timages.forEach(image => enhanceImages(image))\n\t} else if (window.IntersectionObserver) {\n\t\t// 2.\n\t\tconst observers = []\n\n\t\tconst observerOptions = {\n\t\t\troot, // 3.\n\t\t\trootMargin, // 4.\n\t\t}\n\n\t\timagesArray.forEach((image, index) => {\n\t\t\tobservers[index] = new IntersectionObserver(intersectionCallback, observerOptions)\n\t\t\tobservers[index].observe(image)\n\t\t})\n\t} else {\n\t\t// 5.\n\t\timagesArray.forEach(image => enhanceImages(image))\n\t}\n}\n\nexport default lazyloadImages\n"],"file":"lazyloadImages.js"}