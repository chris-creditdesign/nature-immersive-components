{"version":3,"sources":["../../../../src/components/ImageBasic/js/lazyLoadImageBasic.js"],"names":["enhanceImages","fig","img","querySelector","classList","contains","src","includes","URL","replace","setAttribute","add","intersectionCallback","entries","forEach","entry","isIntersecting","target","lazyloadImageBasic","root","rootMargin","images","document","getElementsByClassName","imagesArray","Array","from","HTMLImageElement","prototype","image","window","observers","observerOptions","index","IntersectionObserver","observe"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;AAaA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,GAAG,EAAI;AAC5B,MAAMC,GAAG,GAAGD,GAAG,CAACE,aAAJ,CAAkB,KAAlB,CAAZ,CAD4B,CAE5B;;AACA,MAAIF,GAAG,CAACG,SAAJ,CAAcC,QAAd,CAAuB,WAAvB,CAAJ,EAAyC,OAHb,CAI5B;;AACA,MAAI,CAACH,GAAG,CAACI,GAAJ,CAAQC,QAAR,CAAiB,QAAjB,CAAL,EAAiC,OALL,CAO5B;;AACA,MAAMC,GAAG,GAAGN,GAAG,CAACI,GAAJ,CAAQG,OAAR,CAAgB,QAAhB,EAA0B,EAA1B,CAAZ;AACAP,EAAAA,GAAG,CAACQ,YAAJ,CAAiB,KAAjB,EAAwBF,GAAxB,EAT4B,CAW5B;;AACAN,EAAAA,GAAG,CAACE,SAAJ,CAAcO,GAAd,CAAkB,WAAlB;AACA,CAbD;AAeA;;;;;;;;;;;AASA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,OAAO,EAAI;AACvCA,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,KAAK,EAAI;AACxB;AACA,QACCA,KAAK,CAACC,cAAN,IACA,CAACD,KAAK,CAACE,MAAN,CAAab,SAAb,CAAuBC,QAAvB,CAAgC,WAAhC,CAFF,EAGE;AACDL,MAAAA,aAAa,CAACe,KAAK,CAACE,MAAP,CAAb;AACA;AACD,GARD;AASA,CAVD;AAYA;;;;;;;;;;;;;;;;AAcA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAGtB;AAAA,MAFJC,IAEI,uEAFG,IAEH;AAAA,MADJC,UACI,uEADS,qBACT;AACJ,MAAMC,MAAM,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,uBAAhC,CAAf;AACA,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWL,MAAX,CAApB;;AAEA,MAAI,aAAaM,gBAAgB,CAACC,SAAlC,EAA6C;AAC5C;AACAJ,IAAAA,WAAW,CAACV,OAAZ,CAAoB,UAAAe,KAAK;AAAA,aAAI7B,aAAa,CAAC6B,KAAD,CAAjB;AAAA,KAAzB;AACA,GAHD,MAGO,IAAI,0BAA0BC,MAA9B,EAAsC;AAC5C;AACA,QAAMC,SAAS,GAAG,EAAlB;AAEA,QAAMC,eAAe,GAAG;AACvBb,MAAAA,IAAI,EAAJA,IADuB;AACjB;AACNC,MAAAA,UAAU,EAAVA,UAFuB,CAEX;;AAFW,KAAxB;AAKAI,IAAAA,WAAW,CAACV,OAAZ,CAAoB,UAACe,KAAD,EAAQI,KAAR,EAAkB;AACrCF,MAAAA,SAAS,CAACE,KAAD,CAAT,GAAmB,IAAIC,oBAAJ,CAClBtB,oBADkB,EAElBoB,eAFkB,CAAnB;AAIAD,MAAAA,SAAS,CAACE,KAAD,CAAT,CAAiBE,OAAjB,CAAyBN,KAAzB;AACA,KAND;AAOA,GAhBM,MAgBA;AACN;AACAL,IAAAA,WAAW,CAACV,OAAZ,CAAoB,UAAAe,KAAK;AAAA,aAAI7B,aAAa,CAAC6B,KAAD,CAAjB;AAAA,KAAzB;AACA;AACD,CA9BD;;eAgCeX,kB","sourcesContent":["/**\n * ## enhanceImages\n *\n * Add high res-image URL, srcset and an adjacent `source` element\n * to display high-res image.\n *\n * 1. Stop is image has already been 'enhanced'.\n * 2. Stop if the src URL does not contain '-small'.\n * 3. Create the normal URL and add it to the image\n * 4. Add the `js-loaded` class so that img cannot be 'enhanced' again.\n *\n * @param {*} img The `img` element to be enhanced\n */\nconst enhanceImages = fig => {\n\tconst img = fig.querySelector(\"img\")\n\t// 1.\n\tif (fig.classList.contains(\"js-loaded\")) return\n\t// 2.\n\tif (!img.src.includes(\"-small\")) return\n\n\t// 3.\n\tconst URL = img.src.replace(/-small/, \"\")\n\timg.setAttribute(\"src\", URL)\n\n\t// 4.\n\timg.classList.add(\"js-loaded\")\n}\n\n/**\n * ## intersectionCallback\n *\n * When the images enter the screen, call `enhanceImages` on each of them.\n *\n * 1. Only call `enchanceImages` if the entry is on screen AND the class\n *    `js-loaded` is not present.\n * @param {array} entries Array of dom elements\n */\nconst intersectionCallback = entries => {\n\tentries.forEach(entry => {\n\t\t// 1.\n\t\tif (\n\t\t\tentry.isIntersecting &&\n\t\t\t!entry.target.classList.contains(\"js-loaded\")\n\t\t) {\n\t\t\tenhanceImages(entry.target)\n\t\t}\n\t})\n}\n\n/**\n * ## lazyloadImages\n *\n * Call `enhanceImages` for each `img[loading=\"lazy\"]` on the page.\n *\n * 1. The images can natively lazyload, so no need for the IntersectionObserver.\n * Call `enhanceImages` straight away.\n * 2. Use IntersectionObserver to load the images when they move into the viewport.\n * 3. The viewport is the root by default.\n * 4. Start loading the image when it is 600px above or below the viewport\n * 5. No lazy loading options are available so pop all the high res images onto the page.\n * @param {*} root\n * @param {*} rootMargin\n */\nconst lazyloadImageBasic = (\n\troot = null,\n\trootMargin = \"600px 0px 600px 0px\"\n) => {\n\tconst images = document.getElementsByClassName(\"js-lazyload-img-basic\")\n\tconst imagesArray = Array.from(images)\n\n\tif (\"loading\" in HTMLImageElement.prototype) {\n\t\t// 1.\n\t\timagesArray.forEach(image => enhanceImages(image))\n\t} else if (\"IntersectionObserver\" in window) {\n\t\t// 2.\n\t\tconst observers = []\n\n\t\tconst observerOptions = {\n\t\t\troot, // 3.\n\t\t\trootMargin, // 4.\n\t\t}\n\n\t\timagesArray.forEach((image, index) => {\n\t\t\tobservers[index] = new IntersectionObserver(\n\t\t\t\tintersectionCallback,\n\t\t\t\tobserverOptions\n\t\t\t)\n\t\t\tobservers[index].observe(image)\n\t\t})\n\t} else {\n\t\t// 5.\n\t\timagesArray.forEach(image => enhanceImages(image))\n\t}\n}\n\nexport default lazyloadImageBasic\n"],"file":"lazyLoadImageBasic.js"}